// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  COURSE_ADMIN
  STUDENT
}

enum SubmissionType {
  TEXT
  DOCUMENT
  GITHUB_REPO
  WEBSITE
  SCREENSHOT
}

enum ContentType {
  TEXT
  URL
  FILE
}

enum Remark {
  EXCELLENT
  GOOD
  CAN_IMPROVE
  NEEDS_IMPROVEMENT
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  hashedPassword   String?
  role             UserRole  @default(STUDENT)
  isActive         Boolean   @default(true)
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  
  // Course management
  createdCourses   Course[]       @relation("CourseCreator")
  courseAdmins     CourseAdmin[]
  enrollments      Enrollment[]
  
  // Question and assessment
  createdQuestions Question[]     @relation("QuestionCreator")
  createdExamples  BaseExample[]  @relation("ExampleCreator")
  submissions      Submission[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  createdByUser User           @relation("CourseCreator", fields: [createdBy], references: [id])
  questions     Question[]
  enrollments   Enrollment[]
  courseAdmins  CourseAdmin[]

  @@map("courses")
}

model CourseAdmin {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId, courseId], map: "idx_course_admins_user_course")
  @@map("course_admins")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  isActive   Boolean  @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId, courseId], map: "idx_enrollments_user_course")
  @@map("enrollments")
}

model Question {
  id               String         @id @default(cuid())
  courseId         String
  questionNumber   Int
  title            String
  description      String         @db.Text
  submissionType   SubmissionType
  assessmentPrompt String         @db.Text
  criteria         String[]       @default([])
  redFlags         String[]       @default([])
  conditionalChecks String[]      @default([])
  guidance         String?        @db.Text
  maxScore         Int            @default(100)
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        String

  // Relations
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdByUser User         @relation("QuestionCreator", fields: [createdBy], references: [id])
  baseExamples BaseExample[]
  submissions  Submission[]

  @@unique([courseId, questionNumber])
  @@index([courseId], map: "idx_questions_course")
  @@map("questions")
}

model BaseExample {
  id          String      @id @default(cuid())
  questionId  String
  title       String
  description String      @db.Text
  content     String      @db.Text
  contentType ContentType
  metadata    Json?       @default("{}")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String

  // Relations
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdByUser User     @relation("ExampleCreator", fields: [createdBy], references: [id])

  @@map("base_examples")
}

model Submission {
  id                String    @id @default(cuid())
  questionId        String
  userId            String
  submissionUrl     String?
  submissionContent String?   @db.Text
  submissionFiles   String[]  @default([])
  metadata          Json?     @default("{}")

  // Assessment results
  assessmentResult  Json?     @default("{}")
  remark            Remark?
  feedback          String?   @db.Text
  criteriaMet       String[]  @default([])
  areasForImprovement String[] @default([])
  confidenceScore   Float?

  // Processing status
  status            String    @default("pending") // pending, processing, completed, failed
  processedAt       DateTime?
  processingTime    Int?      // in milliseconds

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_submissions_user")
  @@index([questionId], map: "idx_submissions_question")
  @@index([status], map: "idx_submissions_status")
  @@map("submissions")
}

